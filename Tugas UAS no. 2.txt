//FILTER BANK

#include <opencv2/opencv.hpp>
#include <iostream>

using namespace cv;
using namespace std;

// Fungsi untuk mengaplikasikan filter bank ke citra
void applyFilterBank(Mat &image) {
    // Matriks kernel filter bank
    float kernel1[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};
    float kernel2[3][3] = {{-1, 2, -1}, {-1, 2, -1}, {-1, 2, -1}};
    float kernel3[3][3] = {{-1, -1, 2}, {-1, 2, -1}, {2, -1, -1}};

    // Membuat kernel filter
    Mat filter1 = Mat(3, 3, CV_32F, kernel1);
    Mat filter2 = Mat(3, 3, CV_32F, kernel2);
    Mat filter3 = Mat(3, 3, CV_32F, kernel3);

    // Mengaplikasikan filter ke citra
    Mat result1, result2, result3;
    filter2D(image, result1, -1, filter1);
    filter2D(image, result2, -1, filter2);
    filter2D(image, result3, -1, filter3);

    // Menampilkan hasil
    imshow("Filtered Image 1", result1);
    imshow("Filtered Image 2", result2);
    imshow("Filtered Image 3", result3);
    waitKey(0);
}

int main() {
    // Baca citra
    Mat image = imread("image.jpg");

    // Periksa apakah citra berhasil dibaca
    if (image.empty()) {
        cerr << "Error: Unable to read the image." << endl;
        return -1;
    }

    // Ubah citra ke dalam skala keabuan
    cvtColor(image, image, COLOR_BGR2GRAY);

    // Panggil fungsi applyFilterBank
    applyFilterBank(image);

    return 0;
}

//IMAGE PYRAMID

#include <opencv2/opencv.hpp>
#include <iostream>

using namespace cv;
using namespace std;

// Fungsi untuk membangun image pyramid
void buildImagePyramid(Mat &image, int levels) {
    Mat currentImage = image.clone();
    
    for (int i = 0; i < levels; ++i) {
        // Tampilkan citra pada setiap level
        imshow("Level " + to_string(i), currentImage);

        // Reduksi citra pada setiap level
        pyrDown(currentImage, currentImage);
    }

    waitKey(0);
}

int main() {
    // Baca citra
    Mat image = imread("image.jpg");

    // Periksa apakah citra berhasil dibaca
    if (image.empty()) {
        cerr << "Error: Unable to read the image." << endl;
        return -1;
    }

    // Panggil fungsi buildImagePyramid dengan jumlah level 4
    buildImagePyramid(image, 4);

    return 0;
}

